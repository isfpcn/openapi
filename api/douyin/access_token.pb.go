// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/douyin/access_token.proto

package douyin

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetAccessTokenRequest struct {
	// 小程序appid
	Appid string `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty" form:"appid" validate:"required"`
	// 获取 access_token 时值为 client_credential
	GrantType            string   `protobuf:"bytes,2,opt,name=grant_type,json=grantType,proto3" json:"grant_type,omitempty" form:"grant_type" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccessTokenRequest) Reset()         { *m = GetAccessTokenRequest{} }
func (m *GetAccessTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccessTokenRequest) ProtoMessage()    {}
func (*GetAccessTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59684f975de31d5, []int{0}
}
func (m *GetAccessTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccessTokenRequest.Unmarshal(m, b)
}
func (m *GetAccessTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccessTokenRequest.Marshal(b, m, deterministic)
}
func (m *GetAccessTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccessTokenRequest.Merge(m, src)
}
func (m *GetAccessTokenRequest) XXX_Size() int {
	return xxx_messageInfo_GetAccessTokenRequest.Size(m)
}
func (m *GetAccessTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccessTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccessTokenRequest proto.InternalMessageInfo

func (m *GetAccessTokenRequest) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *GetAccessTokenRequest) GetGrantType() string {
	if m != nil {
		return m.GrantType
	}
	return ""
}

type GetAccessTokenResponse struct {
	// 抖音错误码
	ErrNo int64 `protobuf:"varint,1,opt,name=err_no,json=errNo,proto3" json:"err_no,omitempty"`
	// 抖音错误信息
	ErrTips              string                       `protobuf:"bytes,2,opt,name=err_tips,json=errTips,proto3" json:"err_tips,omitempty"`
	Data                 *GetAccessTokenResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetAccessTokenResponse) Reset()         { *m = GetAccessTokenResponse{} }
func (m *GetAccessTokenResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccessTokenResponse) ProtoMessage()    {}
func (*GetAccessTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59684f975de31d5, []int{1}
}
func (m *GetAccessTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccessTokenResponse.Unmarshal(m, b)
}
func (m *GetAccessTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccessTokenResponse.Marshal(b, m, deterministic)
}
func (m *GetAccessTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccessTokenResponse.Merge(m, src)
}
func (m *GetAccessTokenResponse) XXX_Size() int {
	return xxx_messageInfo_GetAccessTokenResponse.Size(m)
}
func (m *GetAccessTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccessTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccessTokenResponse proto.InternalMessageInfo

func (m *GetAccessTokenResponse) GetErrNo() int64 {
	if m != nil {
		return m.ErrNo
	}
	return 0
}

func (m *GetAccessTokenResponse) GetErrTips() string {
	if m != nil {
		return m.ErrTips
	}
	return ""
}

func (m *GetAccessTokenResponse) GetData() *GetAccessTokenResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetAccessTokenResponse_Data struct {
	// 获取的 access_token
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// access_token 有效时间，单位：秒
	ExpiresIn            int64    `protobuf:"varint,2,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccessTokenResponse_Data) Reset()         { *m = GetAccessTokenResponse_Data{} }
func (m *GetAccessTokenResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetAccessTokenResponse_Data) ProtoMessage()    {}
func (*GetAccessTokenResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59684f975de31d5, []int{1, 0}
}
func (m *GetAccessTokenResponse_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccessTokenResponse_Data.Unmarshal(m, b)
}
func (m *GetAccessTokenResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccessTokenResponse_Data.Marshal(b, m, deterministic)
}
func (m *GetAccessTokenResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccessTokenResponse_Data.Merge(m, src)
}
func (m *GetAccessTokenResponse_Data) XXX_Size() int {
	return xxx_messageInfo_GetAccessTokenResponse_Data.Size(m)
}
func (m *GetAccessTokenResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccessTokenResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccessTokenResponse_Data proto.InternalMessageInfo

func (m *GetAccessTokenResponse_Data) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *GetAccessTokenResponse_Data) GetExpiresIn() int64 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func init() {
	proto.RegisterType((*GetAccessTokenRequest)(nil), "douyin.GetAccessTokenRequest")
	proto.RegisterType((*GetAccessTokenResponse)(nil), "douyin.GetAccessTokenResponse")
	proto.RegisterType((*GetAccessTokenResponse_Data)(nil), "douyin.GetAccessTokenResponse.Data")
}

func init() { proto.RegisterFile("api/douyin/access_token.proto", fileDescriptor_e59684f975de31d5) }

var fileDescriptor_e59684f975de31d5 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x56, 0xfa, 0x07, 0x75, 0x11, 0x12, 0x46, 0x81, 0x12, 0x11, 0x1a, 0x02, 0x48, 0xe5, 0x40,
	0x2c, 0x95, 0x03, 0x52, 0x39, 0x51, 0x55, 0xa2, 0x5c, 0x38, 0x44, 0x3d, 0x71, 0x89, 0xdc, 0x66,
	0x1a, 0x2c, 0x5a, 0xdb, 0xb5, 0x9d, 0x8a, 0x5e, 0xe1, 0x11, 0x38, 0xf3, 0x48, 0x7b, 0xda, 0x7b,
	0x4f, 0xfb, 0x04, 0x7d, 0x82, 0x55, 0xec, 0xd5, 0xb6, 0xbb, 0xea, 0xee, 0x29, 0x99, 0xf9, 0xfc,
	0xfd, 0x68, 0x66, 0x50, 0x48, 0x25, 0x23, 0xb9, 0x28, 0xb7, 0x8c, 0x13, 0x3a, 0x9f, 0x83, 0xd6,
	0x99, 0x11, 0xbf, 0x80, 0x27, 0x52, 0x09, 0x23, 0x70, 0xcb, 0x41, 0xc1, 0x87, 0x82, 0x99, 0x9f,
	0xe5, 0x2c, 0x99, 0x8b, 0x15, 0x29, 0x44, 0x21, 0x88, 0x85, 0x67, 0xe5, 0xc2, 0x56, 0xb6, 0xb0,
	0x7f, 0x8e, 0x16, 0xbc, 0x2c, 0x84, 0x28, 0x96, 0x40, 0x2a, 0x71, 0xca, 0xb9, 0x30, 0xd4, 0x30,
	0xc1, 0xb5, 0x43, 0xe3, 0xff, 0x1e, 0xf2, 0xbf, 0x82, 0xf9, 0x62, 0xed, 0xa6, 0x95, 0x5b, 0x0a,
	0xeb, 0x12, 0xb4, 0xc1, 0x43, 0xd4, 0xa4, 0x52, 0xb2, 0xbc, 0xeb, 0x45, 0x5e, 0xbf, 0x3d, 0x7a,
	0xbb, 0xdf, 0xf5, 0xa2, 0x85, 0x50, 0xab, 0x61, 0x6c, 0xdb, 0x71, 0xb4, 0xa1, 0x4b, 0x96, 0x53,
	0x03, 0xc3, 0x58, 0xc1, 0xba, 0x64, 0x0a, 0xf2, 0x38, 0x75, 0x14, 0x3c, 0x41, 0xa8, 0x50, 0x94,
	0x9b, 0xcc, 0x6c, 0x25, 0x74, 0x6b, 0x56, 0xe0, 0xfd, 0x7e, 0xd7, 0x7b, 0xe7, 0x04, 0x0e, 0xd8,
	0x69, 0x95, 0xb6, 0x7d, 0x30, 0xad, 0xf0, 0x33, 0x0f, 0x3d, 0xbb, 0x9d, 0x4f, 0x4b, 0xc1, 0x35,
	0x60, 0x1f, 0xb5, 0x40, 0xa9, 0x8c, 0x0b, 0x9b, 0xb0, 0x9e, 0x36, 0x41, 0xa9, 0xef, 0x02, 0xbf,
	0x40, 0x0f, 0xab, 0xb6, 0x61, 0x52, 0x3b, 0xe7, 0xf4, 0x01, 0x28, 0x35, 0x65, 0x52, 0xe3, 0x4f,
	0xa8, 0x91, 0x53, 0x43, 0xbb, 0xf5, 0xc8, 0xeb, 0x77, 0x06, 0x6f, 0x12, 0x37, 0xd0, 0xe4, 0xb4,
	0x7e, 0x32, 0xa6, 0x86, 0xa6, 0x96, 0x10, 0x4c, 0x50, 0xa3, 0xaa, 0xf0, 0x6b, 0xf4, 0xe8, 0x78,
	0x31, 0x6e, 0x34, 0x69, 0x87, 0x1e, 0xd8, 0x38, 0x44, 0x08, 0x7e, 0x4b, 0xa6, 0x40, 0x67, 0x8c,
	0xdb, 0x00, 0xf5, 0xb4, 0x7d, 0xd5, 0xf9, 0xc6, 0x07, 0x7f, 0x3d, 0xf4, 0x64, 0x6c, 0x6d, 0x8f,
	0x2c, 0x31, 0x47, 0x8f, 0x6f, 0x86, 0xc0, 0xe1, 0x5d, 0xe1, 0xec, 0x72, 0x82, 0x57, 0xf7, 0x67,
	0x8f, 0xc3, 0x3f, 0xe7, 0x17, 0xff, 0x6a, 0xcf, 0x63, 0xff, 0xfa, 0x9e, 0xa4, 0xd4, 0x64, 0x33,
	0x20, 0x36, 0xf7, 0xc8, 0xff, 0xf1, 0x34, 0x21, 0x87, 0x6b, 0xfb, 0xec, 0x3e, 0xb3, 0x96, 0xbd,
	0x89, 0x8f, 0x97, 0x01, 0x00, 0x00, 0xff, 0xff, 0xef, 0x36, 0x2e, 0x85, 0x89, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DouyinAccessTokenClient is the client API for DouyinAccessToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DouyinAccessTokenClient interface {
	// access_token 是小程序的全局唯一调用凭据，开发者调用小程序支付时需要使用 access_token。access_token 的有效期为 2 个小时，需要定时刷新 access_token，重复获取会导致之前一次获取的 access_token 的有效期缩短为 5 分钟。
	GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error)
}

type douyinAccessTokenClient struct {
	cc *grpc.ClientConn
}

func NewDouyinAccessTokenClient(cc *grpc.ClientConn) DouyinAccessTokenClient {
	return &douyinAccessTokenClient{cc}
}

func (c *douyinAccessTokenClient) GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error) {
	out := new(GetAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/douyin.DouyinAccessToken/GetAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DouyinAccessTokenServer is the server API for DouyinAccessToken service.
type DouyinAccessTokenServer interface {
	// access_token 是小程序的全局唯一调用凭据，开发者调用小程序支付时需要使用 access_token。access_token 的有效期为 2 个小时，需要定时刷新 access_token，重复获取会导致之前一次获取的 access_token 的有效期缩短为 5 分钟。
	GetAccessToken(context.Context, *GetAccessTokenRequest) (*GetAccessTokenResponse, error)
}

// UnimplementedDouyinAccessTokenServer can be embedded to have forward compatible implementations.
type UnimplementedDouyinAccessTokenServer struct {
}

func (*UnimplementedDouyinAccessTokenServer) GetAccessToken(ctx context.Context, req *GetAccessTokenRequest) (*GetAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}

func RegisterDouyinAccessTokenServer(s *grpc.Server, srv DouyinAccessTokenServer) {
	s.RegisterService(&_DouyinAccessToken_serviceDesc, srv)
}

func _DouyinAccessToken_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinAccessTokenServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.DouyinAccessToken/GetAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinAccessTokenServer).GetAccessToken(ctx, req.(*GetAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DouyinAccessToken_serviceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.DouyinAccessToken",
	HandlerType: (*DouyinAccessTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessToken",
			Handler:    _DouyinAccessToken_GetAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/douyin/access_token.proto",
}
