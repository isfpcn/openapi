// Code generated by protoc-gen-fiber v0.1, DO NOT EDIT.
// source: api/douyin/auth.proto

package douyin

import (
	"context"

	"github.com/gogo/protobuf/proto"
	"github.com/gofiber/fiber/v2"
)

var (
	PathDouyinAuthUploadMaterial   = "/douyin/auth/upload_material"
	PathDouyinAuthBypartner        = "/douyin/auth/bypartner"
	PathDouyinAuthByself           = "/douyin/auth/byself"
	PathDouyinAuthAddRole          = "/douyin/auth/add_role"
	PathDouyinAuthGetBasicAuth     = "/douyin/auth/get_basic_auth"
	PathDouyinAuthUpdateBasicAuth  = "/douyin/auth/update_basic_auth"
	PathDouyinAuthGetClassAuth     = "/douyin/auth/get_class_auth"
	PathDouyinAuthUpdateClassAuth  = "/douyin/auth/update_class_auth"
	PathDouyinAuthAddClassAuth     = "/douyin/auth/add_class_auth"
	PathDouyinAuthGetAuditDetail   = "/douyin/auth/get_audit_detail"
	PathDouyinAuthBindRole         = "/douyin/auth/bind_role"
	PathDouyinAuthUnbindRole       = "/douyin/auth/unbind_role"
	PathDouyinAuthGetBindList      = "/douyin/auth/get_bind_list"
	PathDouyinAuthAuthRole         = "/douyin/auth/auth_role"
	PathDouyinAuthUnauthRole       = "/douyin/auth/unauth_role"
	PathDouyinAuthGetAppidAuth     = "/douyin/auth/get_appid_auth"
	PathDouyinAuthUpdateAuthletter = "/douyin/auth/update_authletter"
	PathDouyinAuthQueryMountscope  = "/douyin/auth/query_mountscope"
	PathDouyinAuthEnableMountscope = "/douyin/auth/enable_mountscope"
	PathDouyinAuthUnbindAccount    = "/douyin/auth/unbind_account"
	PathDouyinAuthQueryEntityInfo  = "/douyin/auth/query_entity_info"
	PathDouyinAuthQueryBindTocList = "/douyin/auth/query_bind_toc_list"
)

// DouyinAuthFiberServer is the server API for DouyinAuth service.
// 抖音-泛知识-角色系统
type DouyinAuthFiberServer interface {
	// 上传材料
	UploadMaterial(ctx context.Context, req *UploadMaterialRequest) (resp *UploadMaterialResponse, err error)
	// 代运营服务商帮老师或代运营模式机构入驻
	Bypartner(ctx context.Context, req *BypartnerRequest) (resp *BypartnerResponse, err error)
	// 自营机构/服务商入驻
	BySelf(ctx context.Context, req *BySelfRequest) (resp *BySelfResponse, err error)
	// 新增角色
	AddRole(ctx context.Context, req *AddRoleRequest) (resp *AddRoleResponse, err error)
	// 查询基础认证资质
	GetBasicAuth(ctx context.Context, req *GetBasicAuthRequest) (resp *GetBasicAuthResponse, err error)
	// 更新基础认证资质
	UpdateBasicAuth(ctx context.Context, req *UpdateBasicAuthRequest) (resp *UpdateBasicAuthResponse, err error)
	// 查询类目认证资质
	GetClassAuth(ctx context.Context, req *GetClassAuthRequest) (resp *GetClassAuthResponse, err error)
	// 更新类目认证资质
	UpdateClassAuth(ctx context.Context, req *UpdateClassAuthRequest) (resp *UpdateClassAuthResponse, err error)
	// 添加类目认证资质
	AddClassAuth(ctx context.Context, req *AddClassAuthRequest) (resp *AddClassAuthResponse, err error)
	// 获取审核任务详情
	GetAuditDetail(ctx context.Context, req *GetAuditDetailRequest) (resp *GetAuditDetailResponse, err error)
	// 小程序绑定角色
	BindRole(ctx context.Context, req *BindRoleRequest) (resp *BindRoleResponse, err error)
	// 小程序解除绑定角色
	UnbindRole(ctx context.Context, req *UnbindRoleRequest) (resp *UnbindRoleResponse, err error)
	// 查询小程序已绑定的角色
	GetBindList(ctx context.Context, req *GetBindListRequest) (resp *GetBindListResponse, err error)
	// 角色授权小程序
	AuthRole(ctx context.Context, req *AuthRoleRequest) (resp *AuthRoleResponse, err error)
	// 解除授权小程序
	UnauthRole(ctx context.Context, req *UnauthRoleRequest) (resp *UnauthRoleResponse, err error)
	// 查询授权小程序
	GetAppidAuth(ctx context.Context, req *GetAppidAuthRequest) (resp *GetAppidAuthResponse, err error)
	// 更新授权小程序授权信息
	UpdateAuthLetter(ctx context.Context, req *UpdateAuthLetterRequest) (resp *UpdateAuthLetterResponse, err error)
	// 查询抖音号绑定、能力授权
	QueryMountscope(ctx context.Context, req *QueryMountscopeRequest) (resp *QueryMountscopeResponse, err error)
	// 新增抖音号绑定、能力授权
	EnableMountscope(ctx context.Context, req *EnableMountscopeRequest) (resp *EnableMountscopeResponse, err error)
	// 解除抖音号绑定、解除能力授权
	UnbindAccount(ctx context.Context, req *UnbindAccountRequest) (resp *UnbindAccountResponse, err error)
	// 查询实体ID
	QueryEntityInfo(ctx context.Context, req *QueryEntityInfoRequest) (resp *QueryEntityInfoResponse, err error)
	// 查询实体已绑定抖音号列表
	QueryBindTocList(ctx context.Context, req *QueryBindTocListRequest) (resp *QueryBindTocListResponse, err error)
}

var (
	DouyinAuthSvc       DouyinAuthFiberServer
	DouyinAuthWriter    func(c *fiber.Ctx, message proto.Message) error
	DouyinAuthValidater func(message proto.Message) error
)

func _DouyinAuth_UploadMaterial0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(UploadMaterialRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.UploadMaterial(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_Bypartner0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(BypartnerRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.Bypartner(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_BySelf0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(BySelfRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.BySelf(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_AddRole0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(AddRoleRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.AddRole(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_GetBasicAuth0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(GetBasicAuthRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.GetBasicAuth(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_UpdateBasicAuth0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(UpdateBasicAuthRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.UpdateBasicAuth(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_GetClassAuth0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(GetClassAuthRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.GetClassAuth(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_UpdateClassAuth0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(UpdateClassAuthRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.UpdateClassAuth(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_AddClassAuth0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(AddClassAuthRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.AddClassAuth(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_GetAuditDetail0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(GetAuditDetailRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.GetAuditDetail(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_BindRole0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(BindRoleRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.BindRole(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_UnbindRole0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(UnbindRoleRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.UnbindRole(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_GetBindList0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(GetBindListRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.GetBindList(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_AuthRole0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(AuthRoleRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.AuthRole(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_UnauthRole0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(UnauthRoleRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.UnauthRole(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_GetAppidAuth0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(GetAppidAuthRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.GetAppidAuth(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_UpdateAuthLetter0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(UpdateAuthLetterRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.UpdateAuthLetter(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_QueryMountscope0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(QueryMountscopeRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.QueryMountscope(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_EnableMountscope0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(EnableMountscopeRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.EnableMountscope(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_UnbindAccount0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(UnbindAccountRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.UnbindAccount(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_QueryEntityInfo0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(QueryEntityInfoRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.QueryEntityInfo(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

func _DouyinAuth_QueryBindTocList0_HTTP_Handler(c *fiber.Ctx) error {
	p := new(QueryBindTocListRequest)
	if err := c.BodyParser(p); err != nil {
		return err
	}
	if err := DouyinAuthValidater(p); err != nil {
		return err
	}
	resp, err := DouyinAuthSvc.QueryBindTocList(c.UserContext(), p)
	if err != nil {
		return err
	}
	return DouyinAuthWriter(c, resp)
}

// RegisterDouyinAuthFiberServer Register the fiber route
func RegisterDouyinAuthFiberServer(e *fiber.App, server DouyinAuthFiberServer, w func(c *fiber.Ctx, message proto.Message) error, v func(message proto.Message) error) {
	DouyinAuthSvc = server
	DouyinAuthWriter = w
	DouyinAuthValidater = v
	e.Post("/douyin/auth/upload_material", _DouyinAuth_UploadMaterial0_HTTP_Handler)
	e.Post("/douyin/auth/bypartner", _DouyinAuth_Bypartner0_HTTP_Handler)
	e.Post("/douyin/auth/byself", _DouyinAuth_BySelf0_HTTP_Handler)
	e.Post("/douyin/auth/add_role", _DouyinAuth_AddRole0_HTTP_Handler)
	e.Post("/douyin/auth/get_basic_auth", _DouyinAuth_GetBasicAuth0_HTTP_Handler)
	e.Post("/douyin/auth/update_basic_auth", _DouyinAuth_UpdateBasicAuth0_HTTP_Handler)
	e.Post("/douyin/auth/get_class_auth", _DouyinAuth_GetClassAuth0_HTTP_Handler)
	e.Post("/douyin/auth/update_class_auth", _DouyinAuth_UpdateClassAuth0_HTTP_Handler)
	e.Post("/douyin/auth/add_class_auth", _DouyinAuth_AddClassAuth0_HTTP_Handler)
	e.Post("/douyin/auth/get_audit_detail", _DouyinAuth_GetAuditDetail0_HTTP_Handler)
	e.Post("/douyin/auth/bind_role", _DouyinAuth_BindRole0_HTTP_Handler)
	e.Post("/douyin/auth/unbind_role", _DouyinAuth_UnbindRole0_HTTP_Handler)
	e.Post("/douyin/auth/get_bind_list", _DouyinAuth_GetBindList0_HTTP_Handler)
	e.Post("/douyin/auth/auth_role", _DouyinAuth_AuthRole0_HTTP_Handler)
	e.Post("/douyin/auth/unauth_role", _DouyinAuth_UnauthRole0_HTTP_Handler)
	e.Post("/douyin/auth/get_appid_auth", _DouyinAuth_GetAppidAuth0_HTTP_Handler)
	e.Post("/douyin/auth/update_authletter", _DouyinAuth_UpdateAuthLetter0_HTTP_Handler)
	e.Post("/douyin/auth/query_mountscope", _DouyinAuth_QueryMountscope0_HTTP_Handler)
	e.Post("/douyin/auth/enable_mountscope", _DouyinAuth_EnableMountscope0_HTTP_Handler)
	e.Post("/douyin/auth/unbind_account", _DouyinAuth_UnbindAccount0_HTTP_Handler)
	e.Post("/douyin/auth/query_entity_info", _DouyinAuth_QueryEntityInfo0_HTTP_Handler)
	e.Post("/douyin/auth/query_bind_toc_list", _DouyinAuth_QueryBindTocList0_HTTP_Handler)
}
